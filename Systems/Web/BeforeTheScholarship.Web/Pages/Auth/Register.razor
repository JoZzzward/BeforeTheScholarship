@page "/register"
@using Microsoft.AspNetCore.Components
@using BeforeTheScholarship.Web.Pages.Auth.Models

@layout SimpleLayout

@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<MudGrid Justify="Justify.Center" class="p-4">
    <MudItem xs="7" sm="4">
        <MudPaper class="p-4">
            <EditForm Model="@registerUserAccountRequest" OnValidSubmit="OnValidSubmit">

                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Register</MudText>

                <ErrorListPreview Errors="Errors" ShowErrors=_showErrors></ErrorListPreview>


                <MudTextField T="string"
                              @bind-Value="registerUserAccountRequest.UserName" For="@(() => registerUserAccountRequest.UserName)"
                              Label="Name"
                              Required="true"
                              RequiredError="Email is required!"
                              HelperText="Input your name"/>

                <MudTextField T="string"
                              @bind-Value="registerUserAccountRequest.Email" For="@(() => registerUserAccountRequest.Email)"
                              Label="Email"
                              Required="true"
                              RequiredError="Email is required!"
                              HelperText="Input your email"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />

                <MudTextField @bind-Value="registerUserAccountRequest.Password" For="@(() => registerUserAccountRequest.Password)"
                              Label="Password"
                              HelperText="Input your password"
                              InputType="@PasswordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@PasswordInputIcon"
                              Required="true"
                              RequiredError="Password is required!"
                              OnAdornmentClick="TogglePasswordVisibility" />

                <MudTextField @bind-Value="registerUserAccountRequest.ConfirmPassword" For="@(() => registerUserAccountRequest.ConfirmPassword)"
                              Label="Confirm password"
                              HelperText="Repeat your password"
                              InputType="@ConfirmPasswordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@ConfirmPasswordInputIcon"
                              Required="true"
                              RequiredError="Password confirm is required!"
                              OnAdornmentClick="ToggleConfirmPasswordVisibility" />

                <div class="d-flex justify-content-between p-4">
                    <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit">Register</MudButton>
                    <MudLink Href="/login"
                             Color="Color.Primary">
                             Already have an account?</MudLink>
                </div>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    MudForm form;

    private RegisterUserAccountRequest registerUserAccountRequest = new();

    private readonly RegisterUserAccountRequestValidator _registerUserAccountRequestValidator = new();

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    bool ConfirmPasswordVisibility;
    InputType ConfirmPasswordInput = InputType.Password;
    string ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private List<string>? Errors = new();
    private bool _showErrors;

    void TogglePasswordVisibility()
    {
        ToggleVisibility(ref PasswordVisibility, ref PasswordInputIcon, ref PasswordInput);
    }

    void ToggleConfirmPasswordVisibility()
    {
        ToggleVisibility(ref ConfirmPasswordVisibility, ref ConfirmPasswordInputIcon, ref ConfirmPasswordInput);
    }

    static void ToggleVisibility(ref bool visibility, ref string icon, ref InputType inputType)
    {
        visibility = !visibility;
        icon = visibility ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        inputType = visibility ? InputType.Text : InputType.Password;
    }

    private async Task OnValidSubmit()
    {
        var validatorResult = await _registerUserAccountRequestValidator.ValidateAsync(registerUserAccountRequest);

        if (!validatorResult.IsValid || registerUserAccountRequest is null)
        {
            Errors = validatorResult.Errors.Select(x => x.ErrorMessage).ToList();
            _showErrors = true;
            Snackbar.Add("Incorrect email or password", Severity.Error);

            return;
        }

        _showErrors = false;
        Errors = new List<string>();

        var result = await AuthService.Register(registerUserAccountRequest);

        if (result.Email == null)
        {
            Errors.Add(result.Error);
            _showErrors = true;
            return;
        }

        NavigationManager.NavigateTo("/login");
    }
}
