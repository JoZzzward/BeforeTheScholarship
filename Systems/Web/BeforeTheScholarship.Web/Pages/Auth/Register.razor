@page "/register"
@layout SimpleLayout

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<MudGrid Justify="Justify.Center" Class="pt-10">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">

                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Register</MudText>

                <MudAlert Severity="Severity.Error" Class="@(ShowErrors ? "mb-3 d-block" : "d-none")">
                    @Error
                    <br />
                    @ErrorDetail
                </MudAlert>

                <MudTextField T="string"
                              @bind-Value="model.Name" For="@(() => model.Name)"
                              Label="Name"
                              Required="true"
                              RequiredError="Email is required!"
                              HelperText="Input your name"/>

                <MudTextField T="string"
                              @bind-Value="model.Email" For="@(() => model.Email)"
                              Label="Email"
                              Required="true"
                              RequiredError="Email is required!"
                              HelperText="Input your email"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />

                <MudTextField @bind-Value="model.Password" For="@(() => model.Password)"
                              Label="Password"
                              HelperText="Input your password"
                              InputType="@PasswordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@PasswordInputIcon"
                              Required="true"
                              RequiredError="Password is required!"
                              OnAdornmentClick="TogglePasswordVisibility" />

                <MudTextField @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)"
                              Label="Confirm password"
                              HelperText="Repeat your password"
                              InputType="@ConfirmPasswordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@ConfirmPasswordInputIcon"
                              Required="true"
                              RequiredError="Password confirm is required!"
                              OnAdornmentClick="ToggleConfirmPasswordVisibility" />

                <div class="d-flex justify-space-between p-4">
                    <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit">Register</MudButton>
                    <MudLink Href="/login"
                             Color="Color.Primary">
                             Already have an account?</MudLink>
                </div>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    MudForm form;

    private RegisterModel model = new RegisterModel()
        {
            Name = "Kirill",
            Email = "jozzzwardtm@mail.ru",
            Password = "123123123",
            ConfirmPassword = "1231231233"
        };

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    bool ConfirmPasswordVisibility;
    InputType ConfirmPasswordInput = InputType.Password;
    string ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private bool ShowErrors;
    private string Error;
    private string ErrorDetail;

    void TogglePasswordVisibility()
    {
        if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    void ToggleConfirmPasswordVisibility()
    {
        if (ConfirmPasswordVisibility)
        {
            ConfirmPasswordVisibility = false;
            ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPasswordInput = InputType.Password;
        }
        else
        {
            ConfirmPasswordVisibility = true;
            ConfirmPasswordInputIcon = Icons.Material.Filled.Visibility;
            ConfirmPasswordInput = InputType.Text;
        }
    }

    private async Task OnValidSubmit()
    {
        ShowErrors = false;
        Error = "";
        ErrorDetail = "";

        Console.WriteLine(model.ConfirmPassword + "   " + model.Password);

        if (model.ConfirmPassword != model.Password)
        {
            Error = "Confirm your password";
            ErrorDetail = "Password and confirm password must be equals!";
            ShowErrors = true;
            return;
        }

        var result = await AuthService.Register(model);

        if (result.ErrorDescription.Count() == 0)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Error = result.Error;
            ErrorDetail = string.Join("\n ", result.ErrorDescription);
            ShowErrors = true;
        }
    }
}
