@page "/login"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components
@using BeforeTheScholarship.Web.Pages.Auth.Models

@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<MudGrid Justify="Justify.Center" Class="pa-10">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">
            <EditForm Model="@loginUserAccountRequest" OnValidSubmit="OnValidSubmit">
                
                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Sign In</MudText>
                
                <ErrorListPreview Errors="Errors" ShowErrors=_showErrors></ErrorListPreview>

                <MudTextField T="string"
                              @bind-Value="loginUserAccountRequest.Email" For="@(() => loginUserAccountRequest.Email)"
                              Label="Login" 
                              Required="true" 
                              RequiredError="Email or username is required!"
                              HelperText="Input your email or username"/>
                <MudTextField @bind-Value="loginUserAccountRequest.Password" For="@(() => loginUserAccountRequest.Password)"
                              Label="Password" 
                              HelperText="Input your password"
                              InputType="@PasswordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@PasswordInputIcon"
                              Required="true"
                              RequiredError="Password is required!"
                              OnAdornmentClick="TogglePasswordVisibility" />

                <MudItem Class="d-flex justify-space-between align-center">
                    <MudButton Class="bg-transparent"
                               @onclick="GoToSendRecoverPasswordPage">
                        Forgot password?
                    </MudButton>
                </MudItem>

                <MudItem Class="d-flex justify-space-between">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               ButtonType="ButtonType.Submit">Sign In</MudButton>
                    <MudLink Href="/register"
                             Color="Color.Primary">
                        Dont have an account?
                    </MudLink>
                </MudItem>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    MudForm form = new();

    private LoginUserAccountRequest loginUserAccountRequest = new();

    private readonly LoginUserAccountRequestValidator _loginUserAccountRequestValidator = new();

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private List<string>? Errors = new();
    private bool _showErrors = false;

    void TogglePasswordVisibility()
    {
        ToggleVisibility(ref PasswordVisibility, ref PasswordInputIcon, ref PasswordInput);
    }

    static void ToggleVisibility(ref bool visibility, ref string icon, ref InputType inputType)
    {
        visibility = !visibility;
        icon = visibility ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        inputType = visibility ? InputType.Text : InputType.Password;
    }

    async Task GoToSendRecoverPasswordPage()
    {
        NavigationManager.NavigateTo("/send-recover-password");
    }

    private async Task OnValidSubmit()
    {
        var validatorResult = await _loginUserAccountRequestValidator.ValidateAsync(loginUserAccountRequest);
        if (!validatorResult.IsValid)
        {
            Errors = validatorResult.Errors.Select(x => x.ErrorMessage).ToList();
            _showErrors = true;
            Snackbar.Add("Email is incorrect", Severity.Error);

            return;
        }

        _showErrors = false;
        Errors = new List<string>();

        var result = await AuthService.Login(loginUserAccountRequest);
        if (result.Successful)
            NavigationManager.NavigateTo("/");
        else
        {
            Errors.Add(result.Error);
            _showErrors = true;
        }
    }
}
