@page "/recover-password"

@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@using BeforeTheScholarship.Web.Pages.Auth.Models
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>Recover password</PageTitle>

<MudContainer Class="d-flex justify-content-center" Style="height: 75vh;">
    <MudCard Class="p-4 mx-auto my-auto" Style="border-radius: 15px; width: 400px">

        <ErrorListPreview Errors="Errors" ShowErrors=_showErrors></ErrorListPreview>

        <MudText Class="m-2 p-2"
                 Typo="Typo.h5">
            Enter your email
        </MudText>

        <MudDivider />

        <MudTextField Label="Email"
                      Class="m-3"
                      Value="@passwordRecoveryRequest.Email"
                      ReadOnly="true" />

        <MudTextField Class="m-3"
                      Label="Password"
                      InputType="@PasswordInput"
                      Adornment="Adornment.End"
                      AdornmentIcon="@PasswordInputIcon"
                      Required="true"
                      RequiredError="Password is required!"
                      OnAdornmentClick="TogglePasswordVisibility" 
                      @bind-Value="passwordRecoveryRequest.NewPassword" />

        <MudButton Class="m-1"
                   Color="Color.Primary"
                   Variant="Variant.Outlined"
                   Size="Size.Medium"
                   @onclick="ConfirmRecoverPassword">
            CONFIRM
        </MudButton>
    </MudCard>
</MudContainer>


@code {
    private PasswordRecoveryRequest? passwordRecoveryRequest = new();

    private readonly PasswordRecoveryRequestValidator _passwordRecoveryRequestValidator = new();


    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private List<string>? Errors = new();
    private bool _showErrors;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token);

        QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email);

        passwordRecoveryRequest = new PasswordRecoveryRequest
            {
                Email = email.ToString(),
                Token = token.ToString().Replace(' ', '+')
            };
    }

    void TogglePasswordVisibility()
    {
        ToggleVisibility(ref PasswordVisibility, ref PasswordInputIcon, ref PasswordInput);
    }

    static void ToggleVisibility(ref bool visibility, ref string icon, ref InputType inputType)
    {
        visibility = !visibility;
        icon = visibility ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        inputType = visibility ? InputType.Text : InputType.Password;
    }

    private async Task ConfirmRecoverPassword()
    {
        var validatorResult = await _passwordRecoveryRequestValidator.ValidateAsync(passwordRecoveryRequest);

        if (!validatorResult.IsValid)
        {
            Errors = validatorResult.Errors.Select(x => x.ErrorMessage).ToList();
            _showErrors = true;
            Snackbar.Add("Email is incorrect", Severity.Error);

            return;
        }

        Errors = null;
        _showErrors = false;

        var result = await AuthService.RecoverPassword(passwordRecoveryRequest);

        if (result is not null)
        {
            Snackbar.Add("Your password was successfully recovered!", Severity.Success);
            NavigationManager.NavigateTo("/login");
        }

    }
}
